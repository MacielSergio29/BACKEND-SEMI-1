def find_points(matrix):
    start = None
    end = None
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] == 'I':
                start = (i, j)
            elif matrix[i][j] == 'F':
                end = (i, j)
    return start, end

def dfs(matrix, x, y, cost, path, all_paths):
    # Verificar límites y si la celda ha sido visitada
    if not (0 <= x < len(matrix) and 0 <= y < len(matrix[0])) or matrix[x][y] is None:
        return
    # Llegada al destino
    if matrix[x][y] == 'F':
        all_paths.append((cost, path + [(x, y)]))
        return
    # Si es un número, continuar explorando
    if isinstance(matrix[x][y], int) or matrix[x][y] == 'I':
        current_value = matrix[x][y]
        matrix[x][y] = None  # Marcar como visitado
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # Movimientos posibles
            dfs(matrix, x + dx, y + dy, cost + (current_value if current_value != 'I' else 0), path + [(x, y)], all_paths)
        matrix[x][y] = current_value  # Desmarcar para otras rutas

def find_min_max_cost_paths(matrix):
    start, end = find_points(matrix)
    all_paths = []
    dfs(matrix, start[0], start[1], 0, [], all_paths)
    
    min_path = min(all_paths, key=lambda x: x[0]) if all_paths else (None, None)
    max_path = max(all_paths, key=lambda x: x[0]) if all_paths else (None, None)
    
    return min_path, max_path

# Representación de la matriz basada en la imagen proporcionada
matrix = [
    [-3, -3, 2, -3, -3, -2, 1, 2, 0, 2, 0, 0, 1],
    [2, 3, 'I', -1, -1, 3, 2, 0, -3, -3, 2, 2, 1],
    [1, -3, -3, 2, 1, -3, -3, 2, 1, -2, 2, 3, -3],
    [0, 0, 3, 0, -3, -3, -3, 0, 2, 2, 1, 1, -3],
    [2, -1, -3, 3, 0, 3, 1, -2, 2, 0, 1, -2, 0],
    [0, 3, -1, -1, 2, -2, 2, 2, 1, -2, -3, 0, -2],
    [0, 3, 2, 0, 1, 1, 2, 3, -1, -3, 0, 0, -2],
    [3, -3, -3, -3, -3, -1, -3, 3, 3, 2, -2, -1, -3],
    [-2, -2, 1, 0, 0, 3, 0, 2, 2, -2, -3, -1, 1],
    [-3, 3, 0, -1, 3, 1, -2, 3, 0, 3, 2, -2, 0],
    [-3, -3, 3, 3, -3, 0, -2, -3, 1, 0, -1, 2, 1],
    [-1, 0, 1, 2, 'F', 0, -3, 3, 3, -2, -1, -3, 2],
    [1, -3, 1, 0, 1, 2, 3, 3, 0, 3, 2, 3, 0]
]

min_path, max_path = find_min_max_cost_paths(matrix)

print("Ruta de menor costo:", min_path)
print("Ruta de mayor costo:", max_path)
